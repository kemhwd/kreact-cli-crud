import React from 'react'
import ReactDataGrid from 'react-data-grid'
import ReactConfirm from 'react-confirm-bootstrap'
import { BrowserRouter as Router, Route, Link } from 'react-router-dom'
import { intlShape, injectIntl } from 'react-intl'
import {{moduleStartCase}}Messages from 'resources/messages/{{moduleStartCase}}Messages'
import {{moduleStartCase}}Store from 'stores/{{moduleStartCase}}Store'
import Actions from 'actions/{{moduleStartCase}}Actions'

class RowActionsFormatter extends React.Component {

	constructor(props) {
		super(props)
		this.deleteRow = this.deleteRow.bind(this)
	}

	deleteRow() {
		Actions.remove{{moduleStartCase}}(this.props.value)
	}

	render() {
		const { formatMessage } = this.props.intl

		return (
			<div>
				<Link className="btn btn-info" to={'/{{moduleStartCase}}s/' + this.props.value.{{moduleStartCase}}Id + '/edit'}>
					{formatMessage({{moduleStartCase}}Messages.Edit)}
				</Link>
				<ReactConfirm
					onConfirm={this.deleteRow}
					body={formatMessage({{moduleStartCase}}Messages.AreYouSureDelete)}
					confirmText={formatMessage({{moduleStartCase}}Messages.ConfirmDelete)}
					title={formatMessage({{moduleStartCase}}Messages.Delete)}>
					<button className="btn btn-danger">{formatMessage({{moduleStartCase}}Messages.Delete)}</button>
				</ReactConfirm>
			</div>
		)
	}

}

RowActionsFormatter.propTypes = {
	intl: intlShape.isRequired,
}

class {{moduleStartCase}}List extends React.Component {

	constructor(props) {
		super(props)
		const { formatMessage } = this.props.intl

		this._columns = [
      {{#listData}}
        { key: '{{dataOrig}}', name: formatMessage({{moduleStartCase}}Messages.{{dataOrig}}), sortable: true },
      {{/listData}}
			{
				key: 'actions',
				name: formatMessage({{moduleStartCase}}Messages.Actions),
				width: 150,
				formatter: injectIntl(RowActionsFormatter)
			}
		]

		this.state = { rows: [], originalRows: [] }
		this.rowGetter = this.rowGetter.bind(this)
		this.rowCount = this.rowCount.bind(this)
		this.handleGridSort = this.handleGridSort.bind(this)
	}

	componentWillReceiveProps(nextProps) {
		console.log(nextProps)
		this.setState({ rows: nextProps.rows, originalRows: nextProps.rows })
	}

	rowGetter(i) {
		this.state.rows[i].actions = this.state.rows[i]
		return this.state.rows[i]
	}

	rowCount() {
		return this.state.rows.length
	}

	handleGridSort(sortColumn, sortDirection) {
    const comparer = (a, b) => {
      if (sortDirection === 'ASC') {
        return (a[sortColumn] > b[sortColumn]) ? 1 : -1
      } else if (sortDirection === 'DESC') {
        return (a[sortColumn] < b[sortColumn]) ? 1 : -1
      }
    }
    const rows = sortDirection === 'NONE' ? this.state.originalRows.slice(0) : this.state.rows.sort(comparer)
    this.setState({ rows });
  }

	render() {
		return (
			<ReactDataGrid
				onGridSort={this.handleGridSort}
				columns={this._columns}
				rowGetter={this.rowGetter}
				rowsCount={this.rowCount()}
				rowHeight={40}
				minHeight={200} />
		);
	}

}


{{moduleStartCase}}List.propTypes = {
	intl: intlShape.isRequired,
};


export default injectIntl({{moduleStartCase}}List)